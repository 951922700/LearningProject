<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lyl.mapper.VideosMapperCustom" >
  <resultMap id="BaseResultMap" type="com.lyl.pojo.vo.VideosVO" >
    <!--
      WARNING - @mbg.generated
    -->
    <id column="id" property="id" jdbcType="VARCHAR" />
    <result column="user_id" property="userId" jdbcType="VARCHAR" />
    <result column="audio_id" property="audioId" jdbcType="VARCHAR" />
    <result column="video_desc" property="videoDesc" jdbcType="VARCHAR" />
    <result column="video_path" property="videoPath" jdbcType="VARCHAR" />
    <result column="video_seconds" property="videoSeconds" jdbcType="REAL" />
    <result column="video_width" property="videoWidth" jdbcType="INTEGER" />
    <result column="video_height" property="videoHeight" jdbcType="INTEGER" />
    <result column="cover_path" property="coverPath" jdbcType="VARCHAR" />
    <result column="like_counts" property="likeCounts" jdbcType="BIGINT" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="face_image" property="faceImage" jdbcType="VARCHAR" />
    <result column="nickname" property="nickname" jdbcType="VARCHAR" />
  </resultMap>

	<!--
		desc 倒xu  1=1作用：保证语句肯定能执行
		这个1=1常用于应用程序根据用户选择项的不同拼凑where条件时用的。
		例如：查询用户的信息，where默认为1=1，这样用户即使不选择任何条件，sql查询也不会出错。
		如果用户选择了姓名，那么where后面追加“and 姓名='用户输入的姓名' ”即可，如果还选择了其他的条件，就继续追加 and 语句就行了。
		如果不用1=1的话，每加一个条件，都要判断前面有没有where 条件，如果没有就要先写where ，
		再追加and语句，如果有就直接追加and语句，因此此时用1=1可以简化了应用程序的复杂度。
	-->
  <select id="queryAllVideos" resultMap="BaseResultMap" parameterType="String">
  
  	select v.*,u.face_image as face_image,u.nickname as nickname from videos v
  	left join users u on u.id = v.user_id
  	where 
  		1 = 1
  		<if test=" videoDesc != null and videoDesc != '' ">
  			and v.video_desc like '%${videoDesc}%'
  		</if>
  		<if test=" userId != null and userId != '' ">
			and v.user_id = #{userId}
		</if>
  		and v.status = 1
  	order by v.create_time desc
  
  </select>
  
  	<!-- 查询我关注的人发的视频 -->
	<select id="queryMyFollowVideos" resultMap="BaseResultMap" parameterType="String">
		select v.*,u.face_image as face_image,u.nickname as nickname from videos v 
		left join users u on v.user_id = u.id
		where 
			v.user_id in (select uf.user_id from users_fans uf where uf.fan_id = #{userId})
			and v.status = 1
			order by v.create_time desc
	</select>
	
	<!-- 查询我喜欢的视频 -->
	<select id="queryMyLikeVideos" resultMap="BaseResultMap" parameterType="String">
		select v.*,u.face_image as face_image,u.nickname as nickname from videos v 
		left join users u on v.user_id = u.id
		where 
			v.id in (select ulv.video_id from users_like_videos ulv where ulv.user_id = #{userId})
			and v.status = 1
			order by v.create_time desc
	</select>
	
	
  
  <update id="addVideoLikeCount" parameterType="String">
  	update videos set like_counts=like_counts+1 where id=#{videoId}
  </update>
  
  <update id="reduceVideoLikeCount" parameterType="String">
  	update videos set like_counts=like_counts-1 where id=#{videoId}
  </update>
  
</mapper>