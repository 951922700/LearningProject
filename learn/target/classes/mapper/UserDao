<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lyl.dao.UserDao">
    <cache/>
    <!--多对多查询-->
    <resultMap id="userRoleMap" type="com.lyl.entity.User">
        <!--主键的配置-->
        <id property="id" column="id"></id>
        <!--非主键的配置-->
        <result property="userName" column="username"></result>
        <result property="birthday" column="birthday"></result>
        <result property="sex" column="sex"></result>
        <result property="address" column="address"></result>
        <collection property="roles" ofType="com.lyl.entity.Role">
            <id column="rid" property="roleId"></id>
            <result column="role_name" property="roleName"></result>
            <result column="role_desc" property="roleDesc"></result>
        </collection>
    </resultMap>
<!--当实体类属性名和数据库列名不一致时的配置,且后面的resultType改成resultMap="userMap(id)"-->
    <resultMap id="userMap" type="com.lyl.entity.User">
        <!--主键的配置-->
        <id property="id" column="id"></id>
        <!--非主键的配置-->
        <result property="userName" column="username"></result>
        <result property="birthday" column="birthday"></result>
        <result property="sex" column="sex"></result>
        <result property="address" column="address"></result>
    </resultMap>

    <!-- 一对多关系映射 -->
    <resultMap id="userAccountMap" type="com.lyl.entity.User">
        <!--主键的配置-->
        <id property="id" column="id"></id>
        <!--非主键的配置-->
        <result property="userName" column="username"></result>
        <result property="birthday" column="birthday"></result>
        <result property="sex" column="sex"></result>
        <result property="address" column="address"></result>
        <!--配置user对象中accounts集合的映射-->
        <collection property="accounts" ofType="com.lyl.entity.Account">
            <id column="aid" property="id"></id>
            <result column="uid" property="uid"></result>
            <result column="money" property="money"></result>
        </collection>
    </resultMap>

    <!-- 一对多关系映射 延迟 -->
    <resultMap id="userAccountMapyanchi" type="com.lyl.entity.User">
        <!--主键的配置-->
        <id property="id" column="id"></id>
        <!--非主键的配置-->
        <result property="userName" column="username"></result>
        <result property="birthday" column="birthday"></result>
        <result property="sex" column="sex"></result>
        <result property="address" column="address"></result>
        <!--配置user对象中accounts集合的映射-->
        <collection property="accounts" column="id" ofType="com.lyl.entity.Account" select="com.lyl.dao.AccountDao.findAccountByUid" ></collection>
    </resultMap>

    <!--将重用的sql语句抽取-->
    <sql id="defaultUser">
        select * from user
    </sql>

    <!--id为对应UserDao对应方法名"-->
    <select id="findAll" resultType="com.lyl.entity.User">
        <include refid="defaultUser"></include>
        <!--select * from user;-->
    </select>

    <select id="findAlls" resultMap="userAccountMap">
        select * from user u left outer join account a on u.id=a.uid
    </select>
    <!--一对多延迟-->
    <select id="findAllYanchi" resultMap="userAccountMapyanchi">
        select * from user
    </select>
    <!--多对多-->
    <select id="findAllUserJoinRole" resultMap="userRoleMap">
        select u.*,r.id as rid,r.role_name,r.role_desc from user u
     left outer join user_role ur on u.id=ur.uid
     left outer join role r on r.id = ur.rid
    </select>

    <!--增加用户，parameterType是参数类型-->

    <insert id="addUser" parameterType="com.lyl.entity.User">
        <!--配置插入操作后，获取插入数据的id，意思是在执行完这个addUser方法后，给我们之前自己封装的没有id的user这个对象查询并放进这个对象-->
        <selectKey keyProperty="id" keyColumn="id" resultType="int" order="AFTER">
            select last_insert_id();
        </selectKey>
        insert  into user(username,address,sex,birthday)values(#{userName},#{address},#{sex},#{birthday});
    </insert>

    <!--更新用户-->
    <update id="updateUser" parameterType="com.lyl.entity.User">
        update user set username=#{userName},address=#{address},sex=#{sex},birthday=#{birthday} where id=#{id};
    </update>

    <!--删除用户-->
    <!--#{id}的id可以随便写，因为参数只有一个int-->
    <delete id="deleteUser" parameterType="Integer">
        delete from user where id=#{id};
    </delete>

    <!--根据id查询用户-->
    <select id="findById" parameterType="int" resultType="com.lyl.entity.User" useCache="true">
        select * from user where id=#{id};
    </select>

    <!--模糊查询-->
    <select id="findByName" parameterType="String" resultType="com.lyl.entity.User">
        select * from user where username like#{name};
    </select>

    <!--查询用户总数-->
    <select id="findTotal" resultType="int">
        select count(id) from user;
    </select>

    <!--根据queryVo的条件查询用户-->
    <select id="findUserByVo" parameterType="com.lyl.entity.QueryVo" resultType="com.lyl.entity.User">
        select * from user where username like#{user.userName};
    </select>
    <!--根据条件查询
    <select id="findUserByCondition" resultType="com.lyl.entity.User" parameterType="com.lyl.entity.User">
        select * from user where 1=1
        <if test="userName!=null">
            and username=#{userName}
        </if>
    </select>-->
    <!--根据条件查询 where1=1可以删掉-->
    <select id="findUserByCondition" resultType="com.lyl.entity.User" parameterType="com.lyl.entity.User">
        select * from user
        <where>
        <if test="userName!=null">
            and username=#{userName}
        </if>
        </where>
    </select>

    <!--根据queryvo中的id集合实现查询用户列表 test中用的是and不是&&-->
    <select id="findUserInIds" resultType="com.lyl.entity.User" parameterType="com.lyl.entity.QueryVo">
        select * from user
        <where>
            <if test="ids!=null and ids.size()>0" >
                <foreach collection="ids" open="and id in (" close=")" item="uid" separator=",">
                    #{uid}
                </foreach>
            </if>
        </where>
    </select>
</mapper>
