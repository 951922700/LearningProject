<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>

    <!-- 1.配置数据库相关参数properties的属性：${url} -->
    <!--路径就是从resources开始读
    resource支持类路径写法，还有一个属性是url Uniform Resource Locator统一资源定位符
    写法：
        http://localhost:8080/mybatisserver
        协议       主机     端口    URI
        Uniform Resource Identifier 统一资源标识符
    -->
    <properties resource="jdbc">
        <!--properties下面value可以使用${driver}表示-->
        <property name="driver" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </properties>

    <settings>
        <!--开启全局延迟加载-->
        <setting name="lazyLoadingEnabled" value="true"/>
        <setting name="aggressiveLazyLoading" value="false"/>
        <setting name="cacheEnabled" value="true"/>
    </settings>
    <!--配置别名 使用typeAliases，他只能配置实体类的别名-->
    <typeAliases >
        <!--类名可以写user代替，type属性指定的是实体类全限定类名，alias指定别名，且别名直接不区分大小写-->
        <typeAlias type="com.lyl.entity.User" alias="user"></typeAlias>
        <!--用于指定要配置的别名，当指定之后，该包下的实体类都会注册别名，并且类名就是别名，不再区分大小写-->
        <package name="com.lyl.entity"></package>
    </typeAliases>
    <!--配置环境-->
    <environments default="mysql">
        <!--配置mysql的环境-->
        <environment id="mysql">
            <!--配置事务类型-->
            <transactionManager type="JDBC"></transactionManager>
            <!--
                配置数据源，连接池
                type属性有三个
                POOLED 使用传统的javax.sql.DataSource规范中的连接池，mybatis中有针对规范的实现（用完关闭返回给pool）
                UNPOOLED    采用传统的获取连接的方式，虽然也实现了javax.sql.DataSource,但没有运用池的概念（每次创建新的连接）
                JNDI    采用服务器提供的JNDI技术来获取DataSource对象，不同服务器拿到的DataSource的对象是不一样的
            -->
            <dataSource type="POOLED">
                <!-- 配置连接池的四个基本属性-->
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>

    <mappers>
        <mapper resource="mapper/UserDao"/>
        <mapper resource="mapper/AccountDao"/>
        <mapper resource="mapper/RoleDao"/>
    </mappers>
</configuration>